expr: {
	`KEYWORD:var IDENTIFIER SET expr
	`comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)
}

iter-expr: {
	`expr (COMMA expr)*
}

comp-expr: {
	`NOT comp-expr
	`arith-expr ((EQ|LT|GT|LTE|GTE) arith-expr)*
}

arith-expr: `term ((PLUS|MINUS) term)*

term: `factor ((MUL|DIV) factor)*

power: `call (POW factor)*

tetration: `expr (TET power)*

call: {
	`conv (ARRW iter-expr)
	`conv NSET
}

conv: {
	`atom (LPAREN (expr (COMMA expr)*)? RPAREN)
	`atom (LSQUARE (expr (COMMA expr)*)? RSQUARE)
	`atom (LCURL (expr (COMMA expr)*)? LCURL)
	`atom
}

atom: {
	`INT|FLOAT|STRING|IDENTIFIER
	`tuple-expr
	`list-expr
	`curl-expr
	`if-expr
	`while-expr
	`func-def
}

list-expr: LSQUARE iter-expr RSQUARE

curl-expr(conv-expr): LCURL iter-expr RCURL

tuple-expr(conv-expr): LPAREN iter-expr RPAREN

factor: {
	`(PLUS|MINUS) atom
	`tetration
}

if-expr: {
	`KEYWORD:if expr SET expr
	(KEYWORD:elif expr SET expr)*
	(KEYWORD:else set expr)?
}

while-expr: {
	`KEYWORD:while expr SET expr

func-def: {
	`KEYWORD:fun IDENTIFIER?
	(LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN)?
	SET expr
}
