iterStmt: [/stmt (SEMI /stmt)*]

stmt: {
	[/lateDef]
	[/iterExpr]
	[/ifExpr]
	[/whileExpr]
}

ifExpr: [
    KEYWORD:if (IDENTIFIER)? (LPAREN /boolOp RPAREN) (SET|NSET) /curlExpr
    (KEYWORD:elif (IDENTIFIER)? (LPAREN /boolOp RPAREN) (SET|NSET) /curlExpr)?
    (KEYWORD:else (IDENTIFIER)? (LPAREN /boolOp RPAREN) (SET|NSET) /curlExpr)?
]

whileExpr: [KEYWORD:while (IDENTIFIER)? (LPAREN /expr RPAREN) (SET|NSET) /curlExpr]

lateDef: [
	KEYWORD:late IDENTIFIER?
	(LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN)?
	(SET|NSET) /curlExpr?
]

iterExpr: [/expr (COMMA /expr)*]

expr: {
	[/boolOp ((KEYWORD:and|KEYWORD:or) /boolOp)*]
}

boolOp: {
	[/binOp ((EE|NE|GT|LT|GTE|LTE) /binOp)*]
	[KEYWORD:not /boolOp]
}

binOp: [factor ((PLUS|MINUS) factor)*]

factor: [/power ((MUL|DIV) /power)*]

power: [/conv ((POW|TET) /atom)*]

conv: {
	[/atom (/tupleExpr|/listExpr|/curlExpr)*]
}

atom: {
	[INT|FLOAT|STRING]
	[/get]
	[/unaryOp]
	[/tupleExpr]
	[/listExpr]
	[/curlExpr]
}

get: [IDENTIFIER (DOT IDENTIFIER)*]

unaryOp: [(MINUS|PLUS) atom]

tupleExpr: [LPAREN (iterExpr)? RPAREN]

listExpr: [LSQUARE (iterExpr)? RSQUARE]

curlExpr: [LCURL (iterStmt)? RCURL]
