iterStmt: [/stmt (SEMI /stmt)*]

stmt: {
	[/lateDef]
	[/iterExpr]
	[/ifExpr]
	[/whileExpr]
	[/colExpr]
	[/varDef]
	[KEYWORD:const /lateDef]
}

reservedKey: {
	[KEYWORD:return /iterExpr]
	[KEYWORD:use IDENTIFIER]
}

varDef: [(KEYWORD:var|KEYWORD:const) IDENTIFIER (SET|EQ) /iterExpr]

colExpr: [
	KEYWORD:col IDENTIFIER? (SET /curlExpr | NSET)
]

ifExpr: [
    KEYWORD:if (IDENTIFIER)? /compExpr (SET|NSET) /curlExpr
    (KEYWORD:else (IDENTIFIER)? /compExpr (SET|NSET) /curlExpr)*
]

whileExpr: [KEYWORD:while (IDENTIFIER)? /compExpr (SET|NSET) /curlExpr]

lateDef: [
	KEYWORD:late IDENTIFIER?
	(LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN)?
	(SET /curlExpr | NSET)
]

iterExpr: [/expr (COMMA /expr)*]

expr: {
	[/call]
	[KEYWORD:encap /stmt]
}

call: {
	[/compExpr (IDENTIFIER? NSET)?]
	[/compExpr (IDENTIFIER? SET /iterExpr)?]
	[/varMod]
}

varMod: [/compExpr EQ /compExpr]

compExpr: [/boolOp ((KEYWORD:and|KEYWORD:or) /boolOp)*]

boolOp: {
	[/binOp ((EE|NE|GT|LT|GTE|LTE) /binOp)*]
	[KEYWORD:not /boolOp]
}

binOp: [factor ((PLUS|MINUS) factor)*]

factor: [/power ((MUL|DIV) /power)*]

power: [/get ((POW|TET) /get)*]

get: [/conv (DOT conv)*]

conv: [/atom (/tupleExpr|/listExpr|/curlExpr)*]

atom: {
	[INT|FLOAT|STRING]
	[IDENTIFIER]
	[/unaryOp]
	[/tupleExpr]
	[/listExpr]
	[/curlExpr]
}

unaryOp: [(MINUS|PLUS) atom]

tupleExpr: [LPAREN (iterExpr)? RPAREN]

listExpr: [LSQUARE (iterExpr)? RSQUARE]

curlExpr: [LCURL (iterStmt)? RCURL]
